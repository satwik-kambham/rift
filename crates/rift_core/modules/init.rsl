# Dashboard

dashboardId = -1
dashboardText = "
Welcome to rift!

Basic Keybinds:

esc - Quit Insert Mode
i - Enter Insert Mode
space q - Quit
space f - Fuzzy File Picker (with fd & fzf)
space F - File Explorer
space b - Switch Buffer
"

fn createDashboardBuffer() {
    if dashboardId == -1 {
        bufferId = createSpecialBuffer()
        setBufferContent(bufferId, dashboardText)
        setActiveBuffer(bufferId)
    }
}

createDashboardBuffer()

#################

# Agentic Chat

llmChatId = -1
chatInput = ""
chatHistory = createArray()

fn renderLLMChat() {
    content = ""
    i = 0
    loop {
        if i >= arrayLen(chatHistory) { break }
        message = arrayGet(chatHistory, i)
        content = content + "\n------\n" + tableGet(message, "role") + ":\n" + tableGet(message, "content") + "\n------\n"
        i = i + 1
    }
    content = content + "\n------\n" + chatInput + "\n------\n"
    setBufferContent(llmChatId, content)
}

fn sendMessage() {
    apiKey = getEnvVar("OPENROUTER_KEY")
    
    message = createTable()
    tableSet(message, "role", "user")
    tableSet(message, "content", chatInput)
    arrayPushBack(chatHistory, message)
    
    renderLLMChat()

    request = createTable()
    tableSet(request, "model", "mistralai/devstral-small")
    tableSet(request, "messages", chatHistory)
    tableSet(request, "stream", false)
    tableSet(request, "temperature", 0.3)
    tableSet(request, "seed", 42)

    body = toJson(request)
    response = postRequestWithBearerToken("https://openrouter.ai/api/v1/chat/completions", body, apiKey)
    response = fromJson(response)
    message = tableGet(arrayGet(tableGet(response, "choices"), 0), "message")
    arrayPushBack(chatHistory, message)

    renderLLMChat()
}

fn inputUpdated() {
    chatInput = getBufferInput(llmChatId)
    renderLLMChat()
}

fn addSpace() {
    chatInput = getBufferInput(llmChatId)
    chatInput = chatInput + " "
    setBufferInput(llmChatId, chatInput)
    renderLLMChat()
}

fn clearInput() {
    chatInput = ""
    setBufferInput(llmChatId, chatInput)
}

fn createLLMChat() {
    if llmChatId == -1 {
        bufferId = createSpecialBuffer()
        llmChatId = bufferId
        registerBufferKeybind(bufferId, "nor enter", sendMessage)
        registerBufferKeybind(bufferId, "ins space", addSpace)
        registerBufferKeybind(bufferId, "ins backspace", clearInput)
        registerBufferInputHook(bufferId, inputUpdated)
        setActiveBuffer(bufferId)
        renderLLMChat()
    }
}

registerGlobalKeybind("nor space c", createLLMChat)
